services:
  person-postgres:
    image: postgres:17
    container_name: person-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: person
    volumes:
      - ./infrastructure/databases/person:/docker-entrypoint-initdb.d:ro
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -p 5432" ]
      interval: 10s
      timeout: 5s
      retries: 20

  keycloak-postgres:
    image: postgres:17
    container_name: keycloak-postgres
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      POSTGRES_DB: keycloak
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
      interval: 10s
      timeout: 5s
      retries: 20

  person-postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: person-postgres-exporter
    depends_on:
      person-postgres:
        condition: service_healthy
    environment:
      DATA_SOURCE_NAME: postgresql://postgres:postgres@person-postgres:5432/postgres?sslmode=disable
    ports:
      - "9188:9187"

  keycloak-postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: keycloak-postgres-exporter
    depends_on:
      person-postgres:
        condition: service_healthy
    environment:
      DATA_SOURCE_NAME: postgresql://keycloak:keycloak@keycloak-postgres:5432/keycloak?sslmode=disable
    ports:
      - "9189:9187"

  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: individuals-keycloak
    command: start-dev --import-realm --metrics-enabled=true
    ports:
      - "8080:8080"
      - "9000:9000"
    environment:
      JAVA_OPTS: -Dkeycloak.migration.usersExportStrategy=REALM_FILE
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_METRICS_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
    volumes:
      - ./infrastructure/keycloak/realm-config.json:/opt/keycloak/data/import/realm-config.json
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:9000/health/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 30

  nexus:
    image: sonatype/nexus3:3.76.0
    container_name: nexus
    ports:
      - "8081:8081"
    environment:
      NEXUS_SECURITY_INITIAL_PASSWORD: admin
      NEXUS_SECURITY_RANDOMPASSWORD: false
    volumes:
      - nexus-data:/nexus-data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/service/rest/v1/status" ]
      interval: 5s
      timeout: 10s
      retries: 30

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:9090/-/healthy" ]
      interval: 10s
      timeout: 5s
      retries: 5

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./infrastructure/loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3100/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    volumes:
      - ./infrastructure/tempo/:/etc/tempo/
      - tempo_data:/var/tempo
    ports:
      - "3200:3200"

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    user: root
    ports:
      - "9080:9080" # HTTP interface
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP http
    volumes:
      - ./infrastructure/alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
    environment:
      GRAFANA_LOKI_URL: http://loki:3100/loki/api/v1/push
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:9080
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy

  grafana:
    image: grafana/grafana:10.3.1
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_started
      alloy:
        condition: service_started
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_METRICS_ENABLED: "true"
    volumes:
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
      - nexus-data:/nexus-data
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 10



volumes:
  artifacts:
  tempo_data:
  nexus-data:
  loki_data:
  loki_chunks:
  loki_index:
  loki_rules: